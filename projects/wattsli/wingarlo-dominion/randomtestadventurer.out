

STATE FOR ADVENTURER: DECK=23 TREASURE POS:[12, 12]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=32 TREASURE POS:[16, 9]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=45 TREASURE POS:[20, 22]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=44 TREASURE POS:[26, 12]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=6 TREASURE POS:[2, 2]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=22 TREASURE POS:[11, 4]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=30 TREASURE POS:[21, 16]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=13 TREASURE POS:[3, 2]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=7 TREASURE POS:[5, 2]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=5 TREASURE POS:[0, 1]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=2 TREASURE POS:[1, 1]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=20 TREASURE POS:[3, 17]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=15 TREASURE POS:[2, 10]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=44 TREASURE POS:[36, 30]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=48 TREASURE POS:[31, 4]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=11 TREASURE POS:[8, 3]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=33 TREASURE POS:[1, 16]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=39 TREASURE POS:[15, 37]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=29 TREASURE POS:[5, 5]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=8 TREASURE POS:[6, 7]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=4 TREASURE POS:[3, 3]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=22 TREASURE POS:[3, 4]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=35 TREASURE POS:[30, 25]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=19 TREASURE POS:[7, 15]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=5 TREASURE POS:[2, 0]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=49 TREASURE POS:[33, 22]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=42 TREASURE POS:[23, 39]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=46 TREASURE POS:[28, 37]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=43 TREASURE POS:[40, 1]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=34 TREASURE POS:[22, 14]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=44 TREASURE POS:[12, 31]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=43 TREASURE POS:[28, 10]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=6 TREASURE POS:[1, 5]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=15 TREASURE POS:[10, 11]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=13 TREASURE POS:[8, 9]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=30 TREASURE POS:[29, 2]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=28 TREASURE POS:[1, 16]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=32 TREASURE POS:[19, 21]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=34 TREASURE POS:[29, 18]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=10 TREASURE POS:[3, 5]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=13 TREASURE POS:[7, 8]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=5 TREASURE POS:[3, 0]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=43 TREASURE POS:[38, 19]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=2 TREASURE POS:[1, 1]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=19 TREASURE POS:[0, 3]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=5 TREASURE POS:[3, 0]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=8 TREASURE POS:[7, 6]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=33 TREASURE POS:[31, 17]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=15 TREASURE POS:[10, 4]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=15 TREASURE POS:[8, 2]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=35 TREASURE POS:[23, 25]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=47 TREASURE POS:[18, 28]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=16 TREASURE POS:[2, 7]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=29 TREASURE POS:[8, 17]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=39 TREASURE POS:[23, 26]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=50 TREASURE POS:[13, 19]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=35 TREASURE POS:[24, 6]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=46 TREASURE POS:[32, 42]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=14 TREASURE POS:[7, 6]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=13 TREASURE POS:[4, 0]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=37 TREASURE POS:[32, 11]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=38 TREASURE POS:[9, 7]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=46 TREASURE POS:[29, 19]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=34 TREASURE POS:[31, 24]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=36 TREASURE POS:[27, 19]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=18 TREASURE POS:[9, 8]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=10 TREASURE POS:[6, 6]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=46 TREASURE POS:[16, 42]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=41 TREASURE POS:[33, 7]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=28 TREASURE POS:[18, 15]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=34 TREASURE POS:[14, 28]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=19 TREASURE POS:[5, 7]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=19 TREASURE POS:[3, 17]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=9 TREASURE POS:[6, 4]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=26 TREASURE POS:[9, 21]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=22 TREASURE POS:[21, 2]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=36 TREASURE POS:[14, 20]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=39 TREASURE POS:[7, 35]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=15 TREASURE POS:[1, 14]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=20 TREASURE POS:[9, 19]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=42 TREASURE POS:[25, 34]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=25 TREASURE POS:[18, 13]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=28 TREASURE POS:[3, 24]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=47 TREASURE POS:[31, 32]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=51 TREASURE POS:[50, 35]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=46 TREASURE POS:[29, 5]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=25 TREASURE POS:[8, 5]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=6 TREASURE POS:[5, 0]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=47 TREASURE POS:[35, 10]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=39 TREASURE POS:[30, 36]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=50 TREASURE POS:[30, 2]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=3 TREASURE POS:[1, 0]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=29 TREASURE POS:[18, 20]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=29 TREASURE POS:[25, 15]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=50 TREASURE POS:[38, 38]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=3 TREASURE POS:[0, 0]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=47 TREASURE POS:[20, 19]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=8 TREASURE POS:[7, 2]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=18 TREASURE POS:[0, 1]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED


STATE FOR ADVENTURER: DECK=5 TREASURE POS:[2, 1]
    TEST 1: 2 more treasures in hand: FAILED
    TEST 2: Deck decreased by the correct amount: FAILED
    TEST 3: Discard increased by the correct amount: FAILED
File 'dominion.c'
Lines executed:37.02% of 578
Branches executed:43.74% of 423
Taken at least once:26.24% of 423
Calls executed:27.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3270 returned 100% blocks executed 83%
     3270:    8:int compare(const void* a, const void* b) {
     3270:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     3270:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      872:   12:    return -1;
     2398:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 109 returned 100% blocks executed 88%
      109:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      109:   44:  SelectStream(1);
call    0 returned 100%
      109:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      109:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      109:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1199:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      109:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      109:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      109:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      109:   89:      state->supplyCount[estate] = 8;
      109:   90:      state->supplyCount[duchy] = 8;
      109:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      109:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      109:  102:  state->supplyCount[silver] = 40;
      109:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2289:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    18007:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    16902:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1075:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
      218:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      109:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      966:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1075:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15827:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      327:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      218:  140:      state->deckCount[i] = 0;
      872:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      654:  143:	  state->deck[i][j] = estate;
      654:  144:	  state->deckCount[i]++;
        -:  145:	}
     1744:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1526:  148:	  state->deck[i][j] = copper;
     1526:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      327:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      218:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      327:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      218:  166:      state->handCount[i] = 0;
      218:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     3052:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2943:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      109:  182:  state->outpostPlayed = 0;
      109:  183:  state->phase = 0;
      109:  184:  state->numActions = 1;
      109:  185:  state->numBuys = 1;
      109:  186:  state->playedCardCount = 0;
      109:  187:  state->whoseTurn = 0;
      109:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      654:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      545:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      109:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      109:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1924 returned 100% blocks executed 100%
     1924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     1706:  210:    return -1;
      218:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2616:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2180:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2180:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2180:  217:    newDeckPos++;
     7303:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     5123:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2180:  221:    state->deckCount[player]--;
        -:  222:  }
     2398:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2180:  224:    state->deck[player][i] = newDeck[i];
     2180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      218:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 1 returned 100% blocks executed 57%
        1:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        1:  280:  who = state->whoseTurn;
        -:  281:
        1:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        1:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
        1:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 11 returned 100% blocks executed 100%
       11:  320:int supplyCount(int card, struct gameState *state) {
       11:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 82%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
       14:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  329:    {
       12:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
       13:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:  334:    {
       11:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
        3:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 33%
branch  1 taken 67% (fallthrough)
        -:  339:    {
        1:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 14 returned 100% blocks executed 100%
       14:  346:int whoseTurn(struct gameState *state) {
       14:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 3 returned 100% blocks executed 82%
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 4093 returned 100% blocks executed 85%
     4093:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4093:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      853:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      853:  538:    state->deckCount[player] = state->discardCount[player];
      853:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      853:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      853:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      853:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      853:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      853:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      853:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     3240:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     3240:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     3240:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3240:  576:    state->deckCount[player]--;
     3240:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     3240:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 1 returned 100% blocks executed 10%
        1:  583:int getCost(int cardNumber)
        -:  584:{
        1:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 100%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 8%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:	
        1:  671:	  adventure(state, currentPlayer);
call    0 returned 100%
        -:  672:    /*  while(drawntreasure<2){
        -:  673:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  674:	  shuffle(currentPlayer, state);
        -:  675:	}
        -:  676:	drawCard(currentPlayer, state);
        -:  677:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  678:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  679:	  drawntreasure++;
        -:  680:	else{
        -:  681:	  temphand[z]=cardDrawn;
        -:  682:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  683:	  z++;
        -:  684:	}
        -:  685:      }
        -:  686:      while(z-1>=0){
        -:  687:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  688:	z=z-1;
        -:  689:      }
        -:  690:	  */
        1:  691:      return 0;
        -:  692:			
        -:  693:    case council_room:
        -:  694:      
    #####:  695:	  conrom(state, currentPlayer, handPos);
call    0 never executed
        -:  696:	  //+4 Cards
        -:  697:      /*for (i = 0; i < 4; i++)
        -:  698:	{
        -:  699:	  drawCard(currentPlayer, state);
        -:  700:	}
        -:  701:			
        -:  702:      //+1 Buy
        -:  703:      state->numBuys++;
        -:  704:			
        -:  705:      //Each other player draws a card
        -:  706:      for (i = 0; i < state->numPlayers; i++)
        -:  707:	{
        -:  708:	  if ( i != currentPlayer )
        -:  709:	    {
        -:  710:	      drawCard(i, state);
        -:  711:	    }
        -:  712:	}
        -:  713:			
        -:  714:      //put played card in played card pile
        -:  715:      discardCard(handPos, currentPlayer, state, 0);
        -:  716:			
        -:  717:      return 0;
        -:  718:		*/
        -:  719:    case feast:
        -:  720:      //gain card with cost up to 5
        -:  721:      //Backup hand
    #####:  722:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  723:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  724:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  725:      }
        -:  726:      //Backup hand
        -:  727:
        -:  728:      //Update Coins for Buy
    #####:  729:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  730:      x = 1;//Condition to loop on
    #####:  731:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  732:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  733:	  if (DEBUG)
        -:  734:	    printf("None of that card left, sorry!\n");
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  738:	  }
        -:  739:	}
    #####:  740:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  741:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  745:	  }
        -:  746:	}
        -:  747:	else{
        -:  748:
        -:  749:	  if (DEBUG){
        -:  750:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  751:	  }
        -:  752:
    #####:  753:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  754:	  x = 0;//No more buying cards
        -:  755:
        -:  756:	  if (DEBUG){
        -:  757:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  758:	  }
        -:  759:
        -:  760:	}
        -:  761:      }     
        -:  762:
        -:  763:      //Reset Hand
    #####:  764:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  765:	state->hand[currentPlayer][i] = temphand[i];
    #####:  766:	temphand[i] = -1;
        -:  767:      }
        -:  768:      //Reset Hand
        -:  769:      			
    #####:  770:      return 0;
        -:  771:			
        -:  772:    case gardens:
    #####:  773:      garden();
call    0 never executed
        -:  774:	  //return -1;
        -:  775:			
        -:  776:    case mine:
    #####:  777:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  778:
    #####:  779:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  780:	{
    #####:  781:	  return -1;
        -:  782:	}
        -:  783:		
    #####:  784:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:
    #####:  789:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  795:
        -:  796:      //discard card from hand
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:
        -:  799:      //discard trashed card
    #####:  800:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  803:	    {
    #####:  804:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  805:	      break;
        -:  806:	    }
        -:  807:	}
        -:  808:			
    #####:  809:      return 0;
        -:  810:			
        -:  811:    case remodel:
    #####:  812:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  813:
    #####:  814:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  815:	{
    #####:  816:	  return -1;
        -:  817:	}
        -:  818:
    #####:  819:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  820:
        -:  821:      //discard card from hand
    #####:  822:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  823:
        -:  824:      //discard trashed card
    #####:  825:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  826:	{
    #####:  827:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  828:	    {
    #####:  829:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  830:	      break;
        -:  831:	    }
        -:  832:	}
        -:  833:
        -:  834:
    #####:  835:      return 0;
        -:  836:		
        -:  837:    case smithy:
        1:  838:      smith(state, currentPlayer, handPos);
call    0 returned 100%
        -:  839:	  /*
        -:  840:	  //+3 Cards
        -:  841:      for (i = 0; i < 3; i++)
        -:  842:	{
        -:  843:	  drawCard(currentPlayer, state);
        -:  844:	}
        -:  845:			
        -:  846:      //discard card from hand
        -:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:      return 0;
        -:  849:		*/
        -:  850:    case village:
        2:  851:      vil(state, currentPlayer, handPos);
call    0 returned 100%
        -:  852:		/*
        -:  853:	 //+1 Card
        -:  854:      drawCard(currentPlayer, state);
        -:  855:			
        -:  856:      //+2 Actions
        -:  857:      state->numActions = state->numActions + 2;
        -:  858:			
        -:  859:      //discard played card from hand
        -:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:      return 0;
        -:  862:		*/
        -:  863:    case baron:
        2:  864:      state->numBuys++;//Increase buys by 1!
        2:  865:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  866:	int p = 0;//Iterator for hand!
    #####:  867:	int card_not_discarded = 1;//Flag for discard set!
    #####:  868:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  869:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  870:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  871:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  872:	    state->discardCount[currentPlayer]++;
    #####:  873:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  874:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  875:	    }
    #####:  876:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  877:	    state->handCount[currentPlayer]--;
    #####:  878:	    card_not_discarded = 0;//Exit the loop
        -:  879:	  }
    #####:  880:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  881:	    if(DEBUG) {
        -:  882:	      printf("No estate cards in your hand, invalid choice\n");
        -:  883:	      printf("Must gain an estate if there are any\n");
        -:  884:	    }
    #####:  885:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  886:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  887:	      state->supplyCount[estate]--;//Decrement estates
    #####:  888:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  889:		isGameOver(state);
call    0 never executed
        -:  890:	      }
        -:  891:	    }
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
        -:  894:			    
        -:  895:	  else{
    #####:  896:	    p++;//Next card
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:			    
        -:  901:      else{
        2:  902:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  903:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        2:  904:	  state->supplyCount[estate]--;//Decrement Estates
        2:  905:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  906:	    isGameOver(state);
call    0 never executed
        -:  907:	  }
        -:  908:	}
        -:  909:      }
        -:  910:	    
        -:  911:      
        2:  912:      return 0;
        -:  913:		
        -:  914:    case great_hall:
        -:  915:      //+1 Card
        1:  916:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  917:			
        -:  918:      //+1 Actions
        1:  919:      state->numActions++;
        -:  920:			
        -:  921:      //discard card from hand
        1:  922:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  923:      return 0;
        -:  924:		
        -:  925:    case minion:
        -:  926:      //+1 action
    #####:  927:      state->numActions++;
        -:  928:			
        -:  929:      //discard card from hand
    #####:  930:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  931:			
    #####:  932:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  933:	{
    #####:  934:	  state->coins = state->coins + 2;
        -:  935:	}
        -:  936:			
    #####:  937:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  938:	{
        -:  939:	  //discard hand
    #####:  940:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  941:	    {
    #####:  942:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  943:	    }
        -:  944:				
        -:  945:	  //draw 4
    #####:  946:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  949:	    }
        -:  950:				
        -:  951:	  //other players discard hand and redraw if hand size > 4
    #####:  952:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  953:	    {
    #####:  954:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  955:		{
    #####:  956:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  957:		    {
        -:  958:		      //discard hand
    #####:  959:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  960:			{
    #####:  961:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  962:			}
        -:  963:							
        -:  964:		      //draw 4
    #####:  965:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  966:			{
    #####:  967:			  drawCard(i, state);
call    0 never executed
        -:  968:			}
        -:  969:		    }
        -:  970:		}
        -:  971:	    }
        -:  972:				
        -:  973:	}
    #####:  974:      return 0;
        -:  975:		
        -:  976:    case steward:
    #####:  977:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  978:	{
        -:  979:	  //+2 cards
    #####:  980:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  981:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  982:	}
    #####:  983:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  984:	{
        -:  985:	  //+2 coins
    #####:  986:	  state->coins = state->coins + 2;
        -:  987:	}
        -:  988:      else
        -:  989:	{
        -:  990:	  //trash 2 cards in hand
    #####:  991:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  992:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  993:	}
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case tribute:
    #####: 1000:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1001:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1002:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1003:	  state->deckCount[nextPlayer]--;
        -: 1004:	}
    #####: 1005:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1006:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1007:	  state->discardCount[nextPlayer]--;
        -: 1008:	}
        -: 1009:	else{
        -: 1010:	  //No Card to Reveal
        -: 1011:	  if (DEBUG){
        -: 1012:	    printf("No cards to reveal\n");
        -: 1013:	  }
        -: 1014:	}
        -: 1015:      }
        -: 1016:	    
        -: 1017:      else{
    #####: 1018:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1019:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1020:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1021:	    state->deckCount[nextPlayer]++;
    #####: 1022:	    state->discard[nextPlayer][i] = -1;
    #####: 1023:	    state->discardCount[nextPlayer]--;
        -: 1024:	  }
        -: 1025:			    
    #####: 1026:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1027:	} 
    #####: 1028:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
    #####: 1031:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1033:	state->deckCount[nextPlayer]--;
        -: 1034:      }    
        -: 1035:		       
    #####: 1036:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1037:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1038:	state->playedCardCount++;
    #####: 1039:	tributeRevealedCards[1] = -1;
        -: 1040:      }
        -: 1041:
    #####: 1042:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1043:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1044:	  state->coins += 2;
        -: 1045:	}
        -: 1046:		    
    #####: 1047:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1048:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1049:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1050:	}
        -: 1051:	else{//Action Card
    #####: 1052:	  state->numActions = state->numActions + 2;
        -: 1053:	}
        -: 1054:      }
        -: 1055:	    
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case ambassador:
    #####: 1059:      j = 0;		//used to check if player has enough cards to discard
        -: 1060:
    #####: 1061:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1062:	{
    #####: 1063:	  return -1;				
        -: 1064:	}
        -: 1065:
    #####: 1066:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1067:	{
    #####: 1068:	  return -1;
        -: 1069:	}
        -: 1070:
    #####: 1071:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
    #####: 1073:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1074:	    {
    #####: 1075:	      j++;
        -: 1076:	    }
        -: 1077:	}
    #####: 1078:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
        -: 1083:      if (DEBUG) 
        -: 1084:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1085:
        -: 1086:      //increase supply count for choosen card by amount being discarded
    #####: 1087:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1088:			
        -: 1089:      //each other player gains a copy of revealed card
    #####: 1090:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1093:	    {
    #####: 1094:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1095:	    }
        -: 1096:	}
        -: 1097:
        -: 1098:      //discard played card from hand
    #####: 1099:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1100:
        -: 1101:      //trash copies of cards returned to supply
    #####: 1102:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1107:		{
    #####: 1108:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1109:		  break;
        -: 1110:		}
        -: 1111:	    }
        -: 1112:	}			
        -: 1113:
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case cutpurse:
        -: 1117:
    #####: 1118:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1122:	    {
    #####: 1123:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:		{
    #####: 1125:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1126:		    {
    #####: 1127:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1128:		      break;
        -: 1129:		    }
    #####: 1130:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1131:		    {
    #####: 1132:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1133:			{
        -: 1134:			  if (DEBUG)
        -: 1135:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1136:			}	
    #####: 1137:		      break;
        -: 1138:		    }		
        -: 1139:		}
        -: 1140:					
        -: 1141:	    }
        -: 1142:				
        -: 1143:	}				
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1147:
    #####: 1148:      return 0;
        -: 1149:
        -: 1150:		
        -: 1151:    case embargo: 
        -: 1152:      //+2 Coins
    #####: 1153:      state->coins = state->coins + 2;
        -: 1154:			
        -: 1155:      //see if selected pile is in play
    #####: 1156:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1157:	{
    #####: 1158:	  return -1;
        -: 1159:	}
        -: 1160:			
        -: 1161:      //add embargo token to selected supply pile
    #####: 1162:      state->embargoTokens[choice1]++;
        -: 1163:			
        -: 1164:      //trash card
    #####: 1165:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case outpost:
        -: 1169:      //set outpost flag
    #####: 1170:      state->outpostPlayed++;
        -: 1171:			
        -: 1172:      //discard card
    #####: 1173:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1174:      return 0;
        -: 1175:		
        -: 1176:    case salvager:
        -: 1177:      //+1 buy
    #####: 1178:      state->numBuys++;
        -: 1179:			
    #####: 1180:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
        -: 1182:	  //gain coins equal to trashed card
    #####: 1183:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1184:	  //trash card
    #####: 1185:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1186:	}
        -: 1187:			
        -: 1188:      //discard card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case sea_hag:
    #####: 1193:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1194:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1195:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1196:	  state->discardCount[i]++;
    #####: 1197:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1198:	}
        -: 1199:      }
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case treasure_map:
        -: 1203:      //search hand for another treasure_map
    #####: 1204:      index = -1;
    #####: 1205:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
    #####: 1207:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1208:	    {
    #####: 1209:	      index = i;
    #####: 1210:	      break;
        -: 1211:	    }
        -: 1212:	}
    #####: 1213:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1214:	{
        -: 1215:	  //trash both treasure cards
    #####: 1216:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1217:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1218:
        -: 1219:	  //gain 4 Gold cards
    #####: 1220:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1221:	    {
    #####: 1222:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1223:	    }
        -: 1224:				
        -: 1225:	  //return success
    #####: 1226:	  return 1;
        -: 1227:	}
        -: 1228:			
        -: 1229:      //no second treasure_map found in hand
    #####: 1230:      return -1;
        -: 1231:    }
        -: 1232:	
    #####: 1233:  return -1;
        -: 1234:}
        -: 1235:
function discardCard called 4 returned 100% blocks executed 78%
        4: 1236:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1237:{
        -: 1238:	
        -: 1239:  //if card is not trashed, added to Played pile 
        4: 1240:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1241:    {
        -: 1242:      //add card to played pile
        4: 1243:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1244:      state->playedCardCount++;
        -: 1245:    }
        -: 1246:	
        -: 1247:  //set played card to -1
        4: 1248:  state->hand[currentPlayer][handPos] = -1;
        -: 1249:	
        -: 1250:  //remove card from player's hand
        4: 1251:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1252:    {
        -: 1253:      //reduce number of cards in hand
    #####: 1254:      state->handCount[currentPlayer]--;
        -: 1255:    }
        4: 1256:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1257:    {
        -: 1258:      //reduce number of cards in hand
    #####: 1259:      state->handCount[currentPlayer]--;
        -: 1260:    }
        -: 1261:  else 	
        -: 1262:    {
        -: 1263:      //replace discarded card with last card in hand
        4: 1264:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1265:      //set last card to -1
        4: 1266:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1267:      //reduce number of cards in hand
        4: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        -: 1270:	
        4: 1271:  return 0;
        -: 1272:}
        -: 1273:
function gainCard called 6 returned 100% blocks executed 90%
        6: 1274:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1275:{
        -: 1276:  //Note: supplyPos is enum of choosen card
        -: 1277:	
        -: 1278:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1279:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1280:    {
    #####: 1281:      return -1;
        -: 1282:    }
        -: 1283:	
        -: 1284:  //added card for [whoseTurn] current player:
        -: 1285:  // toFlag = 0 : add to discard
        -: 1286:  // toFlag = 1 : add to deck
        -: 1287:  // toFlag = 2 : add to hand
        -: 1288:
        6: 1289:  if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1290:    {
        2: 1291:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1292:      state->deckCount[player]++;
        -: 1293:    }
        4: 1294:  else if (toFlag == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1295:    {
        1: 1296:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1297:      state->handCount[player]++;
        -: 1298:    }
        -: 1299:  else
        -: 1300:    {
        3: 1301:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1302:      state->discardCount[player]++;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //decrease number in supply pile
        6: 1306:  state->supplyCount[supplyPos]--;
        -: 1307:	 
        6: 1308:  return 0;
        -: 1309:}
        -: 1310:
function updateCoins called 111 returned 100% blocks executed 100%
      111: 1311:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1312:{
        -: 1313:  int i;
        -: 1314:	
        -: 1315:  //reset coin count
      111: 1316:  state->coins = 0;
        -: 1317:
        -: 1318:  //add coins for each Treasure card in player's hand
      666: 1319:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1320:    {
      555: 1321:      if (state->hand[player][i] == copper)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 1322:	{
      440: 1323:	  state->coins += 1;
        -: 1324:	}
      115: 1325:      else if (state->hand[player][i] == silver)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 1326:	{
        2: 1327:	  state->coins += 2;
        -: 1328:	}
      113: 1329:      else if (state->hand[player][i] == gold)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 1330:	{
        2: 1331:	  state->coins += 3;
        -: 1332:	}	
        -: 1333:    }	
        -: 1334:
        -: 1335:  //add bonus
      111: 1336:  state->coins += bonus;
        -: 1337:
      111: 1338:  return 0;
        -: 1339:}
function adventure called 101 returned 100% blocks executed 94%
      101: 1340:int adventure(struct gameState *state, int currentPlayer){
      101: 1341:  int nextPlayer = currentPlayer + 1;
        -: 1342:
        -: 1343:  int temphand[MAX_HAND];// moved above the if statement
      101: 1344:  int drawntreasure=0;
        -: 1345:  int cardDrawn;
      101: 1346:  int z = 0;// this is the counter for the temp hand
      101: 1347:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1348:    nextPlayer = 0;
        -: 1349:  }
     3743: 1350:	while(drawntreasure<2){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
     3541: 1351:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      853: 1352:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1353:	}
     3541: 1354:	drawCard(currentPlayer, state);
call    0 returned 100%
     3541: 1355:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]+1];//top card of hand is most recently drawn card. bagool
     3541: 1356:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
      202: 1357:	  drawntreasure++;
        -: 1358:	else{
     3339: 1359:	  temphand[z]=cardDrawn;
     3339: 1360:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     3339: 1361:	  z++;
        -: 1362:	}
        -: 1363:      }
     3541: 1364:      while(z-1>=0){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
     3339: 1365:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     3339: 1366:	z=z-1;
        -: 1367:      }
      101: 1368:}
        -: 1369:
        -: 1370:
function smith called 1 returned 100% blocks executed 89%
        1: 1371:int smith(struct gameState *state, int currentPlayer, int handPos){
        1: 1372:	int nextPlayer = currentPlayer + 1;
        -: 1373:	int i;
        -: 1374:  int temphand[MAX_HAND];// moved above the if statement
        1: 1375:  int drawntreasure=0;
        -: 1376:  int cardDrawn;
        1: 1377:  int z = 0;// this is the counter for the temp hand
        1: 1378:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1379:    nextPlayer = 0;
        -: 1380:  }
        -: 1381:	//+3 Cards
        5: 1382:      for (i = 0; i <= 3; i++) //bagool
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1383:	{
        4: 1384:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1385:	}
        -: 1386:			
        -: 1387:      //discard card from hand
        1: 1388:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1389:      return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
function conrom called 0 returned 0% blocks executed 0%
    #####: 1393:int conrom(struct gameState *state, int currentPlayer, int handPos){
    #####: 1394:	int nextPlayer = currentPlayer + 1;
        -: 1395:
        -: 1396:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1397:  int drawntreasure=0;
        -: 1398:  int cardDrawn;
        -: 1399:  int i;
    #####: 1400:  int z = 0;// this is the counter for the temp hand
    #####: 1401:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1402:    nextPlayer == 0; //bagool
        -: 1403:  }
    #####: 1404:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1405:	{
    #####: 1406:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1407:	}
        -: 1408:			
        -: 1409:      //+1 Buy
    #####: 1410:      state->numBuys++;
        -: 1411:			
        -: 1412:      //Each other player draws a card
    #####: 1413:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1414:	{
    #####: 1415:	  if ( i == currentPlayer )	//bagool
branch  0 never executed
branch  1 never executed
        -: 1416:	    {
    #####: 1417:	      drawCard(i, state);
call    0 never executed
        -: 1418:	    }
        -: 1419:	}
        -: 1420:			
        -: 1421:      //put played card in played card pile
    #####: 1422:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1423:			
    #####: 1424:      return 0;
        -: 1425:}
        -: 1426:
function vil called 2 returned 100% blocks executed 83%
        2: 1427:int vil(struct gameState *state, int currentPlayer, int handPos){
        2: 1428:	int nextPlayer = currentPlayer + 1;
        -: 1429:
        -: 1430:  int temphand[MAX_HAND];// moved above the if statement
        2: 1431:  int drawntreasure=0;
        -: 1432:  int cardDrawn;
        2: 1433:  int z = 0;// this is the counter for the temp hand
        2: 1434:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1435:    nextPlayer = 0;
        -: 1436:  }
        -: 1437:	//+1 Card
        2: 1438:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1439:			
        -: 1440:      //+2 Actions
        2: 1441:      state->numActions++; //bagool
        -: 1442:			
        -: 1443:      //discard played card from hand
        2: 1444:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1445:      return 0;
        -: 1446:}
function garden called 0 returned 0% blocks executed 0%
    #####: 1447:int garden(){
    #####: 1448:	return -1;
        -: 1449:}
        -: 1450://end of dominion.c
        -: 1451:
